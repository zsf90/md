{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u8fd9\u662f Yew \u7f16\u7a0b\u7b14\u8bb0\u6587\u6863 Yew \u7684\u5b98\u7f51\u5730\u5740 yew.rs . \u4f7f\u7528 Yew \u7684\u6b65\u9aa4 \u5b89\u88c5 trunk \u6dfb\u52a0 yew \u4f9d\u8d56 \u8bbe\u7f6e\u6784\u5efa\u76ee\u6807 \u7b2c\u4e00\u4e2a Yew \u4f8b\u5b50 \u4f9d\u8d56\u5b89\u88c5 [package] name = \"yew-app\" version = \"0.1.0\" edition = \"2021\" # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html [dependencies] yew = \"0.19\" src/main.rs use yew::prelude::*; #[function_component(App)] fn app() -> Html { html! { <h1>{ \"Hello World\" }</h1> } } fn main() { yew::start_app::<App>(); } \u5728\u9879\u76ee\u6839\u76ee\u5f55\u521b\u5efa index.html <!DOCTYPE html> <html lang=\"en\"> <head> </head> <body></body> </html> \u542f\u52a8\u5f00\u53d1\u670d\u52a1\u5668 trunk serve --open --port 8888 \u5728 rust \u4e2d\u5199 html \u8981\u5728 rust \u5199 html \u9700\u8981\u7528\u5230 html! {} \u5b8f\uff0c\u4f8b\u5b50\u5982\u4e0b\uff1a html! { <> <h1>{ \"RustConf Explorer\" }</h1> <div> <h3>{\"Videos to watch\"}</h3> <p>{ \"John Doe: Building and breaking things\" }</p> <p>{ \"Jane Smith: The development process\" }</p> <p>{ \"Matt Miller: The Web 7.0\" }</p> <p>{ \"Tom Jerry: Mouseless development\" }</p> </div> <div> <h3>{ \"John Doe: Building and breaking things\" }</h3> <img src=\"https://via.placeholder.com/640x360.png?text=Video+Player+Placeholder\" alt=\"video thumbnail\" /> </div> </> } \u5728 rust \u7684 html! \u5b8f\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u7528 <> \u4f5c\u4e3a\u7a7a\u8282\u70b9\u3002 \u7528 rust \u6784\u5efa html \u4e2d\u9700\u8981\u7684\u5143\u7d20 use gloo::console::log; use yew::prelude::*; #[derive(Properties, PartialEq)] struct MyObject { username: String, age: u32, } #[function_component(App)] pub fn app() -> Html { let mut users = vec![ MyObject { username: \"\u5f20\u4e09\".to_string(), age: 23, }, MyObject { username: \"\u738b\u4e94\".to_string(), age: 43, }, MyObject { username: \"\u674e\u56db\".to_string(), age: 22, }, MyObject { username: \"\u8d75\u516d\".to_string(), age: 17, }, ]; let users = users .iter() .map(|user| { html! { <li>{user.username.to_string()} {\"-\"} {user.age}</li> } }) .collect::<Html>(); html! { <> <h1 class=\"title\">{\"Hello Yew\"}</h1> <ul>{users}</ul> </> } }","title":"\u9996\u9875"},{"location":"#yew","text":"\u5b89\u88c5 trunk \u6dfb\u52a0 yew \u4f9d\u8d56 \u8bbe\u7f6e\u6784\u5efa\u76ee\u6807","title":"\u4f7f\u7528 Yew \u7684\u6b65\u9aa4"},{"location":"#yew_1","text":"","title":"\u7b2c\u4e00\u4e2a Yew \u4f8b\u5b50"},{"location":"#_1","text":"[package] name = \"yew-app\" version = \"0.1.0\" edition = \"2021\" # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html [dependencies] yew = \"0.19\"","title":"\u4f9d\u8d56\u5b89\u88c5"},{"location":"#srcmainrs","text":"use yew::prelude::*; #[function_component(App)] fn app() -> Html { html! { <h1>{ \"Hello World\" }</h1> } } fn main() { yew::start_app::<App>(); }","title":"src/main.rs"},{"location":"#indexhtml","text":"<!DOCTYPE html> <html lang=\"en\"> <head> </head> <body></body> </html> \u542f\u52a8\u5f00\u53d1\u670d\u52a1\u5668 trunk serve --open --port 8888","title":"\u5728\u9879\u76ee\u6839\u76ee\u5f55\u521b\u5efa index.html"},{"location":"#rust-html","text":"\u8981\u5728 rust \u5199 html \u9700\u8981\u7528\u5230 html! {} \u5b8f\uff0c\u4f8b\u5b50\u5982\u4e0b\uff1a html! { <> <h1>{ \"RustConf Explorer\" }</h1> <div> <h3>{\"Videos to watch\"}</h3> <p>{ \"John Doe: Building and breaking things\" }</p> <p>{ \"Jane Smith: The development process\" }</p> <p>{ \"Matt Miller: The Web 7.0\" }</p> <p>{ \"Tom Jerry: Mouseless development\" }</p> </div> <div> <h3>{ \"John Doe: Building and breaking things\" }</h3> <img src=\"https://via.placeholder.com/640x360.png?text=Video+Player+Placeholder\" alt=\"video thumbnail\" /> </div> </> } \u5728 rust \u7684 html! \u5b8f\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u7528 <> \u4f5c\u4e3a\u7a7a\u8282\u70b9\u3002","title":"\u5728 rust \u4e2d\u5199 html"},{"location":"#rust-html_1","text":"use gloo::console::log; use yew::prelude::*; #[derive(Properties, PartialEq)] struct MyObject { username: String, age: u32, } #[function_component(App)] pub fn app() -> Html { let mut users = vec![ MyObject { username: \"\u5f20\u4e09\".to_string(), age: 23, }, MyObject { username: \"\u738b\u4e94\".to_string(), age: 43, }, MyObject { username: \"\u674e\u56db\".to_string(), age: 22, }, MyObject { username: \"\u8d75\u516d\".to_string(), age: 17, }, ]; let users = users .iter() .map(|user| { html! { <li>{user.username.to_string()} {\"-\"} {user.age}</li> } }) .collect::<Html>(); html! { <> <h1 class=\"title\">{\"Hello Yew\"}</h1> <ul>{users}</ul> </> } }","title":"\u7528 rust \u6784\u5efa html \u4e2d\u9700\u8981\u7684\u5143\u7d20"},{"location":"about/","text":"\u8fd9\u662f\u6211\u7684 mkdocs \u7ad9\u70b9 \u5728 zsf90.github.io/md/xxx \u4e0b\u6709\u591a\u4e2a\u7528 mkdocs \u7ad9\u70b9\uff0c\u8fd9\u4e9b\u7ad9\u70b9\u5305\u542b\u4e0d\u540c\u7684\u5185\u5bb9\u3002 \u5b50\u7ad9\u70b9\u5217\u8868 \u547d\u4ee4\u6587\u6863 \u7f16\u7a0b\u8bed\u8a00 \u7535\u5b50\u6280\u672f","title":"About"},{"location":"about/#mkdocs","text":"\u5728 zsf90.github.io/md/xxx \u4e0b\u6709\u591a\u4e2a\u7528 mkdocs \u7ad9\u70b9\uff0c\u8fd9\u4e9b\u7ad9\u70b9\u5305\u542b\u4e0d\u540c\u7684\u5185\u5bb9\u3002","title":"\u8fd9\u662f\u6211\u7684 mkdocs \u7ad9\u70b9"},{"location":"about/#_1","text":"\u547d\u4ee4\u6587\u6863 \u7f16\u7a0b\u8bed\u8a00 \u7535\u5b50\u6280\u672f","title":"\u5b50\u7ad9\u70b9\u5217\u8868"},{"location":"callback/","text":"\u4f8b\u5b501\uff1a use gloo::console::log; use yew::prelude::*; use crate::components::atoms::main_title::{Color, MainTitle}; #[function_component(App)] pub fn app() -> Html { let main_title_load = Callback::from(|message: String| log!(message)); html! { <div> <MainTitle title={\"Hello,World!\"} color={Color::Ok} on_load={main_title_load}/> </div> } } use stylist::{css, style, yew::styled_component, Style}; use yew::prelude::*; #[derive(Properties, PartialEq)] pub struct Props { pub title: String, pub color: Color, pub on_load: Callback<String>, } #[derive(PartialEq)] pub enum Color { Normal, Ok, Error, } impl Color { pub fn to_string(&self) -> String { match self { Color::Normal => \"normal\".to_owned(), Color::Ok => \"ok\".to_owned(), Color::Error => \"error\".to_owned(), } } } #[function_component(MainTitle)] pub fn main_title(props: &Props) -> Html { let stylesheet = style!( r#\" .normal { color: white; } .ok { color: green; } .error { color: red; } \"# ) .unwrap(); props.on_load.emit(\"Im loaded!!!!\".to_owned()); html! { <div class={stylesheet}> <h1 class={props.color.to_string()}>{&props.title}</h1> </div> } }","title":"Callback"},{"location":"form/","text":"\u8868\u5355","title":"\u8868\u5355"},{"location":"form/#_1","text":"","title":"\u8868\u5355"},{"location":"introduction/","text":"html! {} \u5b8f\u53ef\u4ee5\u8ba9\u6211\u4eec\u5728 Rust \u4e2d\u5199 html\uff0c\u5982\u4e0b\u4f8b\u5b50\uff1a use yew::html; html! { <div> <div data-key=\"abc\"></div> <div class=\"parent\"> <span class=\"child\" value=\"anything\"></span> <label for=\"first-name\">{ \"First Name\" }</label> <input type=\"text\" id=\"first-name\" value=\"placeholder\" /> <input type=\"checkbox\" checked=true /> <textarea value=\"write a story\" /> <select name=\"status\"> <option selected=true disabled=false value=\"\">{ \"Selected\" }</option> <option selected=false disabled=true value=\"\">{ \"Unselected\" }</option> </select> </div> </div> }; \u6761\u4ef6\u6e32\u67d3 use yew::html; html! { if true { <p>{ \"True case\" }</p> } }; if let else use yew::html; let some_text = Some(\"text\"); html! { if let Some(text) = some_text { <p>{ text }</p> } }; \u5faa\u73af\u8f93\u51fa html use yew::prelude::*; #[function_component(App)] pub fn app() -> Html { let title_enable = false; let lists = vec![ \"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", ]; html! { <> if title_enable { <h1 class=\"title\">{\"Hello Yew\"}</h1> } else { <h1 class=\"title\">{\"\u65e0\u6807\u9898\"}</h1> } <ul>{list_to_html(lists)}</ul> </> } } fn list_to_html(list: Vec<&str>) -> Vec<Html> { list.iter() .map(|item| { html! { <li>{item}</li> } }) .collect() }","title":"\u521d\u8bc6 Yew"},{"location":"introduction/#html","text":"use yew::prelude::*; #[function_component(App)] pub fn app() -> Html { let title_enable = false; let lists = vec![ \"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", ]; html! { <> if title_enable { <h1 class=\"title\">{\"Hello Yew\"}</h1> } else { <h1 class=\"title\">{\"\u65e0\u6807\u9898\"}</h1> } <ul>{list_to_html(lists)}</ul> </> } } fn list_to_html(list: Vec<&str>) -> Vec<Html> { list.iter() .map(|item| { html! { <li>{item}</li> } }) .collect() }","title":"\u5faa\u73af\u8f93\u51fa html"},{"location":"license/","text":"License","title":"License"},{"location":"license/#license","text":"","title":"License"},{"location":"style/","text":"\u5185\u90e8\u6837\u5f0f \u7b2c\u4e00\u4e2a\u4f8b\u5b50 use gloo::console::log; use stylist::{style, yew::styled_component}; use yew::prelude::*; #[styled_component(App)] pub fn app() -> Html { let stylesheet = style!( r#\" h1 { color: orange; } p { font-size: 14px; color: #00cccc; } ul { list-style: none; display: inline-block; } ul li { display: inline-block; padding: 4px; } \"# ) .unwrap(); let title_enable = true; let lists = vec![ \"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", ]; html! { <div class={stylesheet}> if title_enable { <h1>{\"Hello Yew\"}</h1> } else { <h1 class=\"title\">{\"\u65e0\u6807\u9898\"}</h1> } <ul>{list_to_html(lists)}</ul> <p>{\"fetching cargo artifacts\"}</p> </div> } } fn list_to_html(list: Vec<&str>) -> Vec<Html> { list.iter() .map(|item| { html! { <li>{item}</li> } }) .collect() } \u884c\u5185\u6837\u5f0f \u4f8b\u5b50 use gloo::console::log; use stylist::{css, style, yew::styled_component}; use yew::prelude::*; #[styled_component(App)] pub fn app() -> Html { let stylesheet = style!( r#\" h1 { color: orange; } p { font-size: 14px; color: #00cccc; } ul { list-style: none; display: inline-block; } ul li { display: inline-block; padding: 4px; } \"# ) .unwrap(); let title_enable = true; let lists = vec![ \"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", ]; html! { <div class={stylesheet}> if title_enable { <h1>{\"Hello Yew\"}</h1> } else { <h1 class=\"title\">{\"\u65e0\u6807\u9898\"}</h1> } <ul>{list_to_html(lists)}</ul> <p>{\"fetching cargo artifacts\"}</p> </div> } } fn list_to_html(list: Vec<&str>) -> Vec<Html> { list.iter() .map(|item| { html! { <li class={css!(color: black; font-weight: bold;)}>{item}</li> } }) .collect() } \u5916\u90e8 css \u6587\u4ef6 use gloo::console::log; use stylist::{css, style, yew::styled_component, Style}; use yew::prelude::*; const STYLE_FILE: &str = include_str!(\"../../style.css\"); #[styled_component(App)] pub fn app() -> Html { let stylesheet = Style::new(STYLE_FILE).unwrap(); let title_enable = true; let lists = vec![ \"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", ]; html! { <div class={stylesheet}> if title_enable { <h1>{\"Hello Yew\"}</h1> } else { <h1 class=\"title\">{\"\u65e0\u6807\u9898\"}</h1> } <ul>{list_to_html(lists)}</ul> <p>{\"fetching cargo artifacts\"}</p> </div> } } fn list_to_html(list: Vec<&str>) -> Vec<Html> { list.iter() .map(|item| { html! { <li class={css!(color: black; font-weight: bold;)}>{item}</li> } }) .collect() } \u5e26\u53c2\u6570\u7684\u7ec4\u4ef6 use yew::prelude::*; #[derive(Properties, PartialEq)] pub struct Props { pub title: String, } #[function_component(MainTitle)] pub fn main_title(props: &Props) -> Html { html! {<h1>{&props.title}</h1>} } use gloo::console::log; use crate::components::atoms::main_title::MainTitle; use stylist::{css, style, yew::styled_component, Style}; use yew::prelude::*; const STYLE_FILE: &str = include_str!(\"../../style.css\"); #[styled_component(App)] pub fn app() -> Html { let stylesheet = Style::new(STYLE_FILE).unwrap(); let title_enable = true; let lists = vec![ \"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", ]; html! { <div class={stylesheet}> if title_enable { <MainTitle title=\"hello RUST!\" /> <MainTitle title=\"hello YEW!\" /> } else { <h1 class=\"title\">{\"\u65e0\u6807\u9898\"}</h1> } <ul>{list_to_html(lists)}</ul> <p>{\"fetching cargo artifacts\"}</p> </div> } } fn list_to_html(list: Vec<&str>) -> Vec<Html> { list.iter() .map(|item| { html! { <li class={css!(color: black; font-weight: bold;)}>{item}</li> } }) .collect() } \u7ec4\u4ef6\u95f4\u4f20\u9012\u201c\u679a\u4e3e\u201d use gloo::console::log; use crate::components::atoms::main_title::{Color, MainTitle}; use stylist::{css, yew::styled_component}; use yew::prelude::*; #[styled_component(App)] pub fn app() -> Html { let title_enable = true; let lists = vec![ \"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", ]; html! { <div> if title_enable { <MainTitle title=\"hello RUST!\" color={Color::Error}/> <MainTitle title=\"hello YEW!\" color={Color::Ok}/> } else { <h1 class=\"title\">{\"\u65e0\u6807\u9898\"}</h1> } <ul>{list_to_html(lists)}</ul> <p>{\"fetching cargo artifacts\"}</p> </div> } } fn list_to_html(list: Vec<&str>) -> Vec<Html> { list.iter() .map(|item| { html! { <li class={css!(color: black; font-weight: bold;)}>{item}</li> } }) .collect() } use stylist::{css, style, yew::styled_component, Style}; use yew::prelude::*; #[derive(Properties, PartialEq)] pub struct Props { pub title: String, pub color: Color, } #[derive(PartialEq)] pub enum Color { Normal, Ok, Error, } impl Color { pub fn to_string(&self) -> String { match self { Color::Normal => \"normal\".to_owned(), Color::Ok => \"ok\".to_owned(), Color::Error => \"error\".to_owned(), } } } #[function_component(MainTitle)] pub fn main_title(props: &Props) -> Html { let stylesheet = style!( r#\" .normal { color: white; } .ok { color: green; } .error { color: red; } \"# ) .unwrap(); html! { <div class={stylesheet}> <h1 class={props.color.to_string()}>{&props.title}</h1> </div> } } Callback use stylist::{css, style, yew::styled_component, Style}; use yew::prelude::*; #[derive(Properties, PartialEq)] pub struct Props { pub title: String, pub color: Color, pub on_load: Callback<String>, } #[derive(PartialEq)] pub enum Color { Normal, Ok, Error, } impl Color { pub fn to_string(&self) -> String { match self { Color::Normal => \"normal\".to_owned(), Color::Ok => \"ok\".to_owned(), Color::Error => \"error\".to_owned(), } } } #[function_component(MainTitle)] pub fn main_title(props: &Props) -> Html { let stylesheet = style!( r#\" .normal { color: white; } .ok { color: green; } .error { color: red; } \"# ) .unwrap(); props.on_load.emit(\"Im loaded!!!!\".to_owned()); html! { <div class={stylesheet}> <h1 class={props.color.to_string()}>{&props.title}</h1> </div> } } use gloo::console::log; use yew::prelude::*; use crate::components::atoms::main_title::{Color, MainTitle}; #[function_component(App)] pub fn app() -> Html { let main_title_load = Callback::from(|message: String| log!(message)); html! { <div> <MainTitle title={\"Hello,World!\"} color={Color::Ok} on_load={main_title_load}/> </div> } }","title":"\u6837\u5f0f"},{"location":"style/#_1","text":"\u7b2c\u4e00\u4e2a\u4f8b\u5b50 use gloo::console::log; use stylist::{style, yew::styled_component}; use yew::prelude::*; #[styled_component(App)] pub fn app() -> Html { let stylesheet = style!( r#\" h1 { color: orange; } p { font-size: 14px; color: #00cccc; } ul { list-style: none; display: inline-block; } ul li { display: inline-block; padding: 4px; } \"# ) .unwrap(); let title_enable = true; let lists = vec![ \"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", ]; html! { <div class={stylesheet}> if title_enable { <h1>{\"Hello Yew\"}</h1> } else { <h1 class=\"title\">{\"\u65e0\u6807\u9898\"}</h1> } <ul>{list_to_html(lists)}</ul> <p>{\"fetching cargo artifacts\"}</p> </div> } } fn list_to_html(list: Vec<&str>) -> Vec<Html> { list.iter() .map(|item| { html! { <li>{item}</li> } }) .collect() }","title":"\u5185\u90e8\u6837\u5f0f"},{"location":"style/#_2","text":"\u4f8b\u5b50 use gloo::console::log; use stylist::{css, style, yew::styled_component}; use yew::prelude::*; #[styled_component(App)] pub fn app() -> Html { let stylesheet = style!( r#\" h1 { color: orange; } p { font-size: 14px; color: #00cccc; } ul { list-style: none; display: inline-block; } ul li { display: inline-block; padding: 4px; } \"# ) .unwrap(); let title_enable = true; let lists = vec![ \"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", ]; html! { <div class={stylesheet}> if title_enable { <h1>{\"Hello Yew\"}</h1> } else { <h1 class=\"title\">{\"\u65e0\u6807\u9898\"}</h1> } <ul>{list_to_html(lists)}</ul> <p>{\"fetching cargo artifacts\"}</p> </div> } } fn list_to_html(list: Vec<&str>) -> Vec<Html> { list.iter() .map(|item| { html! { <li class={css!(color: black; font-weight: bold;)}>{item}</li> } }) .collect() }","title":"\u884c\u5185\u6837\u5f0f"},{"location":"style/#css","text":"use gloo::console::log; use stylist::{css, style, yew::styled_component, Style}; use yew::prelude::*; const STYLE_FILE: &str = include_str!(\"../../style.css\"); #[styled_component(App)] pub fn app() -> Html { let stylesheet = Style::new(STYLE_FILE).unwrap(); let title_enable = true; let lists = vec![ \"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", ]; html! { <div class={stylesheet}> if title_enable { <h1>{\"Hello Yew\"}</h1> } else { <h1 class=\"title\">{\"\u65e0\u6807\u9898\"}</h1> } <ul>{list_to_html(lists)}</ul> <p>{\"fetching cargo artifacts\"}</p> </div> } } fn list_to_html(list: Vec<&str>) -> Vec<Html> { list.iter() .map(|item| { html! { <li class={css!(color: black; font-weight: bold;)}>{item}</li> } }) .collect() } \u5e26\u53c2\u6570\u7684\u7ec4\u4ef6 use yew::prelude::*; #[derive(Properties, PartialEq)] pub struct Props { pub title: String, } #[function_component(MainTitle)] pub fn main_title(props: &Props) -> Html { html! {<h1>{&props.title}</h1>} } use gloo::console::log; use crate::components::atoms::main_title::MainTitle; use stylist::{css, style, yew::styled_component, Style}; use yew::prelude::*; const STYLE_FILE: &str = include_str!(\"../../style.css\"); #[styled_component(App)] pub fn app() -> Html { let stylesheet = Style::new(STYLE_FILE).unwrap(); let title_enable = true; let lists = vec![ \"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", ]; html! { <div class={stylesheet}> if title_enable { <MainTitle title=\"hello RUST!\" /> <MainTitle title=\"hello YEW!\" /> } else { <h1 class=\"title\">{\"\u65e0\u6807\u9898\"}</h1> } <ul>{list_to_html(lists)}</ul> <p>{\"fetching cargo artifacts\"}</p> </div> } } fn list_to_html(list: Vec<&str>) -> Vec<Html> { list.iter() .map(|item| { html! { <li class={css!(color: black; font-weight: bold;)}>{item}</li> } }) .collect() }","title":"\u5916\u90e8 css \u6587\u4ef6"},{"location":"style/#_3","text":"use gloo::console::log; use crate::components::atoms::main_title::{Color, MainTitle}; use stylist::{css, yew::styled_component}; use yew::prelude::*; #[styled_component(App)] pub fn app() -> Html { let title_enable = true; let lists = vec![ \"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", ]; html! { <div> if title_enable { <MainTitle title=\"hello RUST!\" color={Color::Error}/> <MainTitle title=\"hello YEW!\" color={Color::Ok}/> } else { <h1 class=\"title\">{\"\u65e0\u6807\u9898\"}</h1> } <ul>{list_to_html(lists)}</ul> <p>{\"fetching cargo artifacts\"}</p> </div> } } fn list_to_html(list: Vec<&str>) -> Vec<Html> { list.iter() .map(|item| { html! { <li class={css!(color: black; font-weight: bold;)}>{item}</li> } }) .collect() } use stylist::{css, style, yew::styled_component, Style}; use yew::prelude::*; #[derive(Properties, PartialEq)] pub struct Props { pub title: String, pub color: Color, } #[derive(PartialEq)] pub enum Color { Normal, Ok, Error, } impl Color { pub fn to_string(&self) -> String { match self { Color::Normal => \"normal\".to_owned(), Color::Ok => \"ok\".to_owned(), Color::Error => \"error\".to_owned(), } } } #[function_component(MainTitle)] pub fn main_title(props: &Props) -> Html { let stylesheet = style!( r#\" .normal { color: white; } .ok { color: green; } .error { color: red; } \"# ) .unwrap(); html! { <div class={stylesheet}> <h1 class={props.color.to_string()}>{&props.title}</h1> </div> } }","title":"\u7ec4\u4ef6\u95f4\u4f20\u9012\u201c\u679a\u4e3e\u201d"},{"location":"style/#callback","text":"use stylist::{css, style, yew::styled_component, Style}; use yew::prelude::*; #[derive(Properties, PartialEq)] pub struct Props { pub title: String, pub color: Color, pub on_load: Callback<String>, } #[derive(PartialEq)] pub enum Color { Normal, Ok, Error, } impl Color { pub fn to_string(&self) -> String { match self { Color::Normal => \"normal\".to_owned(), Color::Ok => \"ok\".to_owned(), Color::Error => \"error\".to_owned(), } } } #[function_component(MainTitle)] pub fn main_title(props: &Props) -> Html { let stylesheet = style!( r#\" .normal { color: white; } .ok { color: green; } .error { color: red; } \"# ) .unwrap(); props.on_load.emit(\"Im loaded!!!!\".to_owned()); html! { <div class={stylesheet}> <h1 class={props.color.to_string()}>{&props.title}</h1> </div> } } use gloo::console::log; use yew::prelude::*; use crate::components::atoms::main_title::{Color, MainTitle}; #[function_component(App)] pub fn app() -> Html { let main_title_load = Callback::from(|message: String| log!(message)); html! { <div> <MainTitle title={\"Hello,World!\"} color={Color::Ok} on_load={main_title_load}/> </div> } }","title":"Callback"}]}