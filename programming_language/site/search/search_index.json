{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7f16\u7a0b\u6587\u6863\u9996\u9875 \u8be5\u6587\u6863\u662f\u6211\u7684\u7f16\u7a0b\u6280\u672f\u6587\u6863\uff0c\u8fd9\u4e9b\u6587\u6863\u8bb0\u5f55\u4e86\u5728\u5b66\u4e60\u5404\u79cd\u7f16\u7a0b\u8bed\u8a00\u65f6\u9047\u5230\u7684\u91cd\u70b9\u77e5\u8bc6\u3002 c.md cplusplus.md rust.md python.md html.md css.md javascript.md csharp.md","title":"\u9996\u9875"},{"location":"#_1","text":"\u8be5\u6587\u6863\u662f\u6211\u7684\u7f16\u7a0b\u6280\u672f\u6587\u6863\uff0c\u8fd9\u4e9b\u6587\u6863\u8bb0\u5f55\u4e86\u5728\u5b66\u4e60\u5404\u79cd\u7f16\u7a0b\u8bed\u8a00\u65f6\u9047\u5230\u7684\u91cd\u70b9\u77e5\u8bc6\u3002 c.md cplusplus.md rust.md python.md html.md css.md javascript.md csharp.md","title":"\u7f16\u7a0b\u6587\u6863\u9996\u9875"},{"location":"about/","text":"","title":"About"},{"location":"c/","text":"C \u8bed\u8a00\u7f16\u7a0b\u6587\u6863","title":"C"},{"location":"c/#c","text":"","title":"C \u8bed\u8a00\u7f16\u7a0b\u6587\u6863"},{"location":"cplusplus/","text":"C++ \u8bed\u8a00\u7f16\u7a0b\u6587\u6863","title":"C++"},{"location":"cplusplus/#c","text":"","title":"C++ \u8bed\u8a00\u7f16\u7a0b\u6587\u6863"},{"location":"csharp/","text":"C# \u8bed\u8a00\u7f16\u7a0b\u6587\u6863","title":"CSharp"},{"location":"csharp/#c","text":"","title":"C# \u8bed\u8a00\u7f16\u7a0b\u6587\u6863"},{"location":"css/","text":"CSS \u8bed\u8a00\u7f16\u7a0b\u6587\u6863","title":"CSS"},{"location":"css/#css","text":"","title":"CSS \u8bed\u8a00\u7f16\u7a0b\u6587\u6863"},{"location":"html/","text":"HTML \u8bed\u8a00\u7f16\u7a0b\u6587\u6863","title":"HTML"},{"location":"html/#html","text":"","title":"HTML \u8bed\u8a00\u7f16\u7a0b\u6587\u6863"},{"location":"javascript/","text":"JavaScript \u8bed\u8a00\u7f16\u7a0b\u6587\u6863","title":"JavsScript"},{"location":"javascript/#javascript","text":"","title":"JavaScript \u8bed\u8a00\u7f16\u7a0b\u6587\u6863"},{"location":"python/","text":"Python \u8bed\u8a00\u7f16\u7a0b\u6587\u6863","title":"Python"},{"location":"python/#python","text":"","title":"Python \u8bed\u8a00\u7f16\u7a0b\u6587\u6863"},{"location":"rust/","text":"Rust \u8bed\u8a00\u7f16\u7a0b\u6587\u6863 Rust \u662f\u6bd4\u8f83\u65b0\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u6027\u80fd\u8f83\u597d\u53ef\u4e0eC/C++\u6bd4\u8f83\uff0c\u4e5f\u662f\u9002\u5408\u5199\u7cfb\u7edf\u7684\u8bed\u8a00\u3002 Hello,World! \u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u5f53\u7136\u662f \"Hello,World!\"\u3002 // hello.rs fn main() { println!(\"Hello,World!\"); } Cargo \u67e5\u770b\u5e2e\u52a9\u53ef\u4ee5\u4f7f\u7528 cargo --help \uff0c\u67e5\u770b\u6307\u5b9a\u547d\u4ee4\u7684\u5e2e\u52a9 cargo build --help \u3002 \u67e5\u770b\u5e2e\u52a9 $ cargo --help Rust's package manager USAGE: cargo [+toolchain] [OPTIONS] [SUBCOMMAND] OPTIONS: -V, --version Print version info and exit --list List installed commands --explain <CODE> Run `rustc --explain CODE` -v, --verbose Use verbose output (-vv very verbose/build.rs output) -q, --quiet No output printed to stdout --color <WHEN> Coloring: auto, always, never --frozen Require Cargo.lock and cache are up to date --locked Require Cargo.lock is up to date --offline Run without accessing the network --config <KEY=VALUE>... Override a configuration value (unstable) -Z <FLAG>... Unstable (nightly-only) flags to Cargo, see 'cargo -Z help' for details -h, --help Prints help information Some common cargo commands are (see all commands with --list): build, b Compile the current package check, c Analyze the current package and report errors, but don't build object files clean Remove the target directory doc, d Build this package's and its dependencies' documentation new Create a new cargo package init Create a new cargo package in an existing directory run, r Run a binary or example of the local package test, t Run the tests bench Run the benchmarks update Update dependencies listed in Cargo.lock search Search registry for crates publish Package and upload this package to the registry install Install a Rust binary. Default location is $HOME/.cargo/bin uninstall Uninstall a Rust binary See 'cargo help <command>' for more information on a specific command. \u521b\u5efa\u4e00\u4e2a\u9879\u76ee cargo new hello_cargo \uff0c\u8be5\u547d\u4ee4\u751f\u6210\u7684\u7ed3\u6784\uff1a zsf90@DESKTOP-N95R1I7:$ tree . \u251c\u2500\u2500 Cargo.toml \u2514\u2500\u2500 src \u2514\u2500\u2500 main.rs Cargo.toml \u8fd9\u4e2a\u6587\u4ef6\u4f7f\u7528 TOML (Tom's Obvious, Minimal Language) \u683c\u5f0f\uff0c\u8fd9\u662f Cargo \u914d\u7f6e\u6587\u4ef6\u7684\u683c\u5f0f\u3002 [package] name = \"hello_cargo\" version = \"0.1.0\" edition = \"2021\" # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html [dependencies] rand = \"0.8.4\" \u53d8\u91cf\u4e0e\u5e38\u91cf // hello.rs fn main() { let height = 10; // \u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u91cf\uff0c\u4e0d\u53ef\u53d8 let mut width = 20; // \u5b9a\u4e49\u4e86\u4e00\u4e2a\u53ef\u53d8\u53d8\u91cf\uff0c\u52a0\u4e0a mut const PI: f64 = 3.1415926; // \u5b9a\u4e49\u4e86\u4e00\u4e2a\u5e38\u91cf } \u4e0a\u9762\u4ee3\u7801\u4e2d height \u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u53d8\u91cf\uff0c width \u662f\u4e00\u4e2a\u53ef\u53d8\u7684\u53d8\u91cf\uff0c PI \u662f\u4e00\u4e2a\u5e38\u91cf\uff0c\u5b9a\u4e49\u5e38\u91cf\u5fc5\u987b\u663e\u5f0f\u6307\u660e\u6570\u636e\u7c7b\u578b\uff0c\u5426\u5219\u4e0d\u80fd\u901a\u8fc7\u7f16\u8bd1\u3002 \u9690\u85cf\uff08Shadowing\uff09 \u7528 let \u5b9a\u4e49\u7684\u4e0d\u53ef\u53d8\u53d8\u91cf\u53ef\u4ee5\u591a\u6b21\u5b9a\u4e49\uff0c\u6700\u65b0\u7684\u53d8\u91cf\u8986\u76d6\u539f\u6765\u7684\u53d8\u91cf\uff0crust\u4e2d\u8fd9\u8fd9\u4e3a \u9690\u85cf \u3002 main.rs fn main() { let x = 5; let x = x + 1; { let x = x * 2; println!(\"The value of x in the inner scope is: {}\", x); } println!(\"The value of x is: {}\", x); } \u590d\u5408\u7c7b\u578b \u590d\u5408\u7c7b\u578b\uff08Compound types\uff09\u53ef\u4ee5\u5c06\u591a\u4e2a\u503c\u7ec4\u5408\u6210\u4e00\u4e2a\u7c7b\u578b\u3002Rust \u6709\u4e24\u4e2a\u539f\u751f\u7684\u590d\u5408\u7c7b\u578b\uff1a\u5143\u7ec4\uff08tuple\uff09\u548c\u6570\u7ec4\uff08array\uff09\u3002 \u5143\u7ec4\u7c7b\u578b () \u5143\u7ec4\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u591a\u79cd\u6570\u636e\u7c7b\u578b\u3002 fn main() { let tup: (i32, f64, u8) = (500, 5.5, 1); } \u6ca1\u6709\u4efb\u4f55\u503c\u7684\u5143\u7ec4 () \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u7c7b\u578b\uff0c\u53ea\u6709\u4e00\u4e2a\u503c\uff0c\u4e5f\u5199\u6210 () \u3002\u8be5\u7c7b\u578b\u88ab\u79f0\u4e3a \u5355\u5143\u7c7b\u578b\uff08unit type\uff09\uff0c\u800c\u8be5\u503c\u88ab\u79f0\u4e3a \u5355\u5143\u503c\uff08unit value\uff09\u3002\u5982\u679c\u8868\u8fbe\u5f0f\u4e0d\u8fd4\u56de\u4efb\u4f55\u5176\u4ed6\u503c\uff0c\u5219\u4f1a\u9690\u5f0f\u8fd4\u56de\u5355\u5143\u503c\u3002 \u6570\u7ec4\u7c7b\u578b [] \u6570\u7ec4\u662f\u4e00\u79cd\u53ea\u80fd\u4fdd\u5b58\u5355\u4e00\u7c7b\u578b\u6570\u636e\u7684\u7ed3\u6784\u3002 fn fn main() { let a = [1,2,3,4,5]; let b: [i32; 5] = [1, 2, 3, 4, 5]; let c = [3; 5]; // let c = [3, 3, 3, 3, 3]; } \u6240\u6709\u6743 \u6808\u4e0e\u5806 \u6307\u9488\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\u5728 \u5806 \u4e0a\u3002 \u5b9a\u4e49\u7684\u53d8\u91cf\u5206\u914d\u5728 \u6808 \u91cc\u3002\u540e\u8fdb\u5148\u51fa\uff08last in, first out\uff09 \u6808 \u6808\u4ee5\u653e\u5165\u503c\u7684\u987a\u5e8f\u5b58\u50a8\u503c\u5e76\u4ee5\u76f8\u53cd\u987a\u5e8f\u53d6\u51fa\u503c\u3002\u8fd9\u4e5f\u88ab\u79f0\u4f5c \u540e\u8fdb\u5148\u51fa \uff08last in, first out\uff09\u3002\u60f3\u8c61\u4e00\u4e0b\u4e00\u53e0\u76d8\u5b50\uff1a\u5f53\u589e\u52a0\u66f4\u591a\u76d8\u5b50\u65f6\uff0c\u628a\u5b83\u4eec\u653e\u5728\u76d8\u5b50\u5806\u7684\u9876\u90e8\uff0c\u5f53\u9700\u8981\u76d8\u5b50\u65f6\uff0c\u4e5f\u4ece\u9876\u90e8\u62ff\u8d70\u3002\u4e0d\u80fd\u4ece\u4e2d\u95f4\u4e5f\u4e0d\u80fd\u4ece\u5e95\u90e8\u589e\u52a0\u6216\u62ff\u8d70\u76d8\u5b50\uff01\u589e\u52a0\u6570\u636e\u53eb\u505a \u8fdb\u6808 \uff08pushing onto the stack\uff09\uff0c\u800c\u79fb\u51fa\u6570\u636e\u53eb\u505a \u51fa\u6808 \uff08popping off the stack\uff09\u3002 \u6808 \u4e2d\u7684\u6240\u6709\u6570\u636e\u90fd\u5fc5\u987b\u5360\u7528\u5df2\u77e5\u4e14\u56fa\u5b9a\u7684\u5927\u5c0f\u3002\u5728\u7f16\u8bd1\u65f6\u5927\u5c0f\u672a\u77e5\u6216\u5927\u5c0f\u53ef\u80fd\u53d8\u5316\u7684\u6570\u636e\uff0c\u8981\u6539\u4e3a\u5b58\u50a8\u5728\u5806\u4e0a\u3002 \u5806 \u5806\u662f\u7f3a\u4e4f\u7ec4\u7ec7\u7684\uff1a\u5f53\u5411\u5806\u653e\u5165\u6570\u636e\u65f6\uff0c\u4f60\u8981\u8bf7\u6c42\u4e00\u5b9a\u5927\u5c0f\u7684\u7a7a\u95f4\u3002\u5185\u5b58\u5206\u914d\u5668\uff08memory allocator\uff09\u5728\u5806\u7684\u67d0\u5904\u627e\u5230\u4e00\u5757\u8db3\u591f\u5927\u7684\u7a7a\u4f4d\uff0c\u628a\u5b83\u6807\u8bb0\u4e3a\u5df2\u4f7f\u7528\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8be5\u4f4d\u7f6e\u5730\u5740\u7684 \u6307\u9488\uff08pointer\uff09\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4f5c \u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\uff08allocating on the heap\uff09\uff0c\u6709\u65f6\u7b80\u79f0\u4e3a \u201c\u5206\u914d\u201d\uff08allocating\uff09\u3002\u5c06\u6570\u636e\u63a8\u5165\u6808\u4e2d\u5e76\u4e0d\u88ab\u8ba4\u4e3a\u662f\u5206\u914d\u3002\u56e0\u4e3a\u6307\u9488\u7684\u5927\u5c0f\u662f\u5df2\u77e5\u5e76\u4e14\u56fa\u5b9a\u7684\uff0c\u4f60\u53ef\u4ee5\u5c06\u6307\u9488\u5b58\u50a8\u5728\u6808\u4e0a\uff0c\u4e0d\u8fc7\u5f53\u9700\u8981\u5b9e\u9645\u6570\u636e\u65f6\uff0c\u5fc5\u987b\u8bbf\u95ee\u6307\u9488\u3002 \u6240\u6709\u6743\u89c4\u5219 Rust \u4e2d\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u6709\u4e00\u4e2a\u88ab\u79f0\u4e3a\u5176 \u6240\u6709\u8005\uff08owner\uff09\u7684\u53d8\u91cf\u3002 \u503c\u5728\u4efb\u4e00\u65f6\u523b\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u6240\u6709\u8005\u3002 \u5f53\u6240\u6709\u8005\uff08\u53d8\u91cf\uff09\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u8fd9\u4e2a\u503c\u5c06\u88ab\u4e22\u5f03\u3002","title":"Rust"},{"location":"rust/#rust","text":"Rust \u662f\u6bd4\u8f83\u65b0\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u6027\u80fd\u8f83\u597d\u53ef\u4e0eC/C++\u6bd4\u8f83\uff0c\u4e5f\u662f\u9002\u5408\u5199\u7cfb\u7edf\u7684\u8bed\u8a00\u3002","title":"Rust \u8bed\u8a00\u7f16\u7a0b\u6587\u6863"},{"location":"rust/#helloworld","text":"\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u5f53\u7136\u662f \"Hello,World!\"\u3002 // hello.rs fn main() { println!(\"Hello,World!\"); }","title":"Hello,World!"},{"location":"rust/#cargo","text":"\u67e5\u770b\u5e2e\u52a9\u53ef\u4ee5\u4f7f\u7528 cargo --help \uff0c\u67e5\u770b\u6307\u5b9a\u547d\u4ee4\u7684\u5e2e\u52a9 cargo build --help \u3002","title":"Cargo"},{"location":"rust/#_1","text":"$ cargo --help Rust's package manager USAGE: cargo [+toolchain] [OPTIONS] [SUBCOMMAND] OPTIONS: -V, --version Print version info and exit --list List installed commands --explain <CODE> Run `rustc --explain CODE` -v, --verbose Use verbose output (-vv very verbose/build.rs output) -q, --quiet No output printed to stdout --color <WHEN> Coloring: auto, always, never --frozen Require Cargo.lock and cache are up to date --locked Require Cargo.lock is up to date --offline Run without accessing the network --config <KEY=VALUE>... Override a configuration value (unstable) -Z <FLAG>... Unstable (nightly-only) flags to Cargo, see 'cargo -Z help' for details -h, --help Prints help information Some common cargo commands are (see all commands with --list): build, b Compile the current package check, c Analyze the current package and report errors, but don't build object files clean Remove the target directory doc, d Build this package's and its dependencies' documentation new Create a new cargo package init Create a new cargo package in an existing directory run, r Run a binary or example of the local package test, t Run the tests bench Run the benchmarks update Update dependencies listed in Cargo.lock search Search registry for crates publish Package and upload this package to the registry install Install a Rust binary. Default location is $HOME/.cargo/bin uninstall Uninstall a Rust binary See 'cargo help <command>' for more information on a specific command.","title":"\u67e5\u770b\u5e2e\u52a9"},{"location":"rust/#_2","text":"cargo new hello_cargo \uff0c\u8be5\u547d\u4ee4\u751f\u6210\u7684\u7ed3\u6784\uff1a zsf90@DESKTOP-N95R1I7:$ tree . \u251c\u2500\u2500 Cargo.toml \u2514\u2500\u2500 src \u2514\u2500\u2500 main.rs Cargo.toml \u8fd9\u4e2a\u6587\u4ef6\u4f7f\u7528 TOML (Tom's Obvious, Minimal Language) \u683c\u5f0f\uff0c\u8fd9\u662f Cargo \u914d\u7f6e\u6587\u4ef6\u7684\u683c\u5f0f\u3002 [package] name = \"hello_cargo\" version = \"0.1.0\" edition = \"2021\" # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html [dependencies] rand = \"0.8.4\"","title":"\u521b\u5efa\u4e00\u4e2a\u9879\u76ee"},{"location":"rust/#_3","text":"// hello.rs fn main() { let height = 10; // \u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u91cf\uff0c\u4e0d\u53ef\u53d8 let mut width = 20; // \u5b9a\u4e49\u4e86\u4e00\u4e2a\u53ef\u53d8\u53d8\u91cf\uff0c\u52a0\u4e0a mut const PI: f64 = 3.1415926; // \u5b9a\u4e49\u4e86\u4e00\u4e2a\u5e38\u91cf } \u4e0a\u9762\u4ee3\u7801\u4e2d height \u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u53d8\u91cf\uff0c width \u662f\u4e00\u4e2a\u53ef\u53d8\u7684\u53d8\u91cf\uff0c PI \u662f\u4e00\u4e2a\u5e38\u91cf\uff0c\u5b9a\u4e49\u5e38\u91cf\u5fc5\u987b\u663e\u5f0f\u6307\u660e\u6570\u636e\u7c7b\u578b\uff0c\u5426\u5219\u4e0d\u80fd\u901a\u8fc7\u7f16\u8bd1\u3002","title":"\u53d8\u91cf\u4e0e\u5e38\u91cf"},{"location":"rust/#shadowing","text":"\u7528 let \u5b9a\u4e49\u7684\u4e0d\u53ef\u53d8\u53d8\u91cf\u53ef\u4ee5\u591a\u6b21\u5b9a\u4e49\uff0c\u6700\u65b0\u7684\u53d8\u91cf\u8986\u76d6\u539f\u6765\u7684\u53d8\u91cf\uff0crust\u4e2d\u8fd9\u8fd9\u4e3a \u9690\u85cf \u3002 main.rs fn main() { let x = 5; let x = x + 1; { let x = x * 2; println!(\"The value of x in the inner scope is: {}\", x); } println!(\"The value of x is: {}\", x); }","title":"\u9690\u85cf\uff08Shadowing\uff09"},{"location":"rust/#_4","text":"\u590d\u5408\u7c7b\u578b\uff08Compound types\uff09\u53ef\u4ee5\u5c06\u591a\u4e2a\u503c\u7ec4\u5408\u6210\u4e00\u4e2a\u7c7b\u578b\u3002Rust \u6709\u4e24\u4e2a\u539f\u751f\u7684\u590d\u5408\u7c7b\u578b\uff1a\u5143\u7ec4\uff08tuple\uff09\u548c\u6570\u7ec4\uff08array\uff09\u3002","title":"\u590d\u5408\u7c7b\u578b"},{"location":"rust/#_5","text":"\u5143\u7ec4\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u591a\u79cd\u6570\u636e\u7c7b\u578b\u3002 fn main() { let tup: (i32, f64, u8) = (500, 5.5, 1); } \u6ca1\u6709\u4efb\u4f55\u503c\u7684\u5143\u7ec4 () \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u7c7b\u578b\uff0c\u53ea\u6709\u4e00\u4e2a\u503c\uff0c\u4e5f\u5199\u6210 () \u3002\u8be5\u7c7b\u578b\u88ab\u79f0\u4e3a \u5355\u5143\u7c7b\u578b\uff08unit type\uff09\uff0c\u800c\u8be5\u503c\u88ab\u79f0\u4e3a \u5355\u5143\u503c\uff08unit value\uff09\u3002\u5982\u679c\u8868\u8fbe\u5f0f\u4e0d\u8fd4\u56de\u4efb\u4f55\u5176\u4ed6\u503c\uff0c\u5219\u4f1a\u9690\u5f0f\u8fd4\u56de\u5355\u5143\u503c\u3002","title":"\u5143\u7ec4\u7c7b\u578b ()"},{"location":"rust/#_6","text":"\u6570\u7ec4\u662f\u4e00\u79cd\u53ea\u80fd\u4fdd\u5b58\u5355\u4e00\u7c7b\u578b\u6570\u636e\u7684\u7ed3\u6784\u3002 fn fn main() { let a = [1,2,3,4,5]; let b: [i32; 5] = [1, 2, 3, 4, 5]; let c = [3; 5]; // let c = [3, 3, 3, 3, 3]; }","title":"\u6570\u7ec4\u7c7b\u578b []"},{"location":"rust/#_7","text":"","title":"\u6240\u6709\u6743"},{"location":"rust/#_8","text":"\u6307\u9488\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\u5728 \u5806 \u4e0a\u3002 \u5b9a\u4e49\u7684\u53d8\u91cf\u5206\u914d\u5728 \u6808 \u91cc\u3002\u540e\u8fdb\u5148\u51fa\uff08last in, first out\uff09","title":"\u6808\u4e0e\u5806"},{"location":"rust/#_9","text":"\u6808\u4ee5\u653e\u5165\u503c\u7684\u987a\u5e8f\u5b58\u50a8\u503c\u5e76\u4ee5\u76f8\u53cd\u987a\u5e8f\u53d6\u51fa\u503c\u3002\u8fd9\u4e5f\u88ab\u79f0\u4f5c \u540e\u8fdb\u5148\u51fa \uff08last in, first out\uff09\u3002\u60f3\u8c61\u4e00\u4e0b\u4e00\u53e0\u76d8\u5b50\uff1a\u5f53\u589e\u52a0\u66f4\u591a\u76d8\u5b50\u65f6\uff0c\u628a\u5b83\u4eec\u653e\u5728\u76d8\u5b50\u5806\u7684\u9876\u90e8\uff0c\u5f53\u9700\u8981\u76d8\u5b50\u65f6\uff0c\u4e5f\u4ece\u9876\u90e8\u62ff\u8d70\u3002\u4e0d\u80fd\u4ece\u4e2d\u95f4\u4e5f\u4e0d\u80fd\u4ece\u5e95\u90e8\u589e\u52a0\u6216\u62ff\u8d70\u76d8\u5b50\uff01\u589e\u52a0\u6570\u636e\u53eb\u505a \u8fdb\u6808 \uff08pushing onto the stack\uff09\uff0c\u800c\u79fb\u51fa\u6570\u636e\u53eb\u505a \u51fa\u6808 \uff08popping off the stack\uff09\u3002 \u6808 \u4e2d\u7684\u6240\u6709\u6570\u636e\u90fd\u5fc5\u987b\u5360\u7528\u5df2\u77e5\u4e14\u56fa\u5b9a\u7684\u5927\u5c0f\u3002\u5728\u7f16\u8bd1\u65f6\u5927\u5c0f\u672a\u77e5\u6216\u5927\u5c0f\u53ef\u80fd\u53d8\u5316\u7684\u6570\u636e\uff0c\u8981\u6539\u4e3a\u5b58\u50a8\u5728\u5806\u4e0a\u3002","title":"\u6808"},{"location":"rust/#_10","text":"\u5806\u662f\u7f3a\u4e4f\u7ec4\u7ec7\u7684\uff1a\u5f53\u5411\u5806\u653e\u5165\u6570\u636e\u65f6\uff0c\u4f60\u8981\u8bf7\u6c42\u4e00\u5b9a\u5927\u5c0f\u7684\u7a7a\u95f4\u3002\u5185\u5b58\u5206\u914d\u5668\uff08memory allocator\uff09\u5728\u5806\u7684\u67d0\u5904\u627e\u5230\u4e00\u5757\u8db3\u591f\u5927\u7684\u7a7a\u4f4d\uff0c\u628a\u5b83\u6807\u8bb0\u4e3a\u5df2\u4f7f\u7528\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8be5\u4f4d\u7f6e\u5730\u5740\u7684 \u6307\u9488\uff08pointer\uff09\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4f5c \u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\uff08allocating on the heap\uff09\uff0c\u6709\u65f6\u7b80\u79f0\u4e3a \u201c\u5206\u914d\u201d\uff08allocating\uff09\u3002\u5c06\u6570\u636e\u63a8\u5165\u6808\u4e2d\u5e76\u4e0d\u88ab\u8ba4\u4e3a\u662f\u5206\u914d\u3002\u56e0\u4e3a\u6307\u9488\u7684\u5927\u5c0f\u662f\u5df2\u77e5\u5e76\u4e14\u56fa\u5b9a\u7684\uff0c\u4f60\u53ef\u4ee5\u5c06\u6307\u9488\u5b58\u50a8\u5728\u6808\u4e0a\uff0c\u4e0d\u8fc7\u5f53\u9700\u8981\u5b9e\u9645\u6570\u636e\u65f6\uff0c\u5fc5\u987b\u8bbf\u95ee\u6307\u9488\u3002","title":"\u5806"},{"location":"rust/#_11","text":"Rust \u4e2d\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u6709\u4e00\u4e2a\u88ab\u79f0\u4e3a\u5176 \u6240\u6709\u8005\uff08owner\uff09\u7684\u53d8\u91cf\u3002 \u503c\u5728\u4efb\u4e00\u65f6\u523b\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u6240\u6709\u8005\u3002 \u5f53\u6240\u6709\u8005\uff08\u53d8\u91cf\uff09\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u8fd9\u4e2a\u503c\u5c06\u88ab\u4e22\u5f03\u3002","title":"\u6240\u6709\u6743\u89c4\u5219"},{"location":"winform/","text":"WinForm \u684c\u9762\u5f00\u53d1 MessageBox \u5728\u6d4b\u8bd5\u65f6\u6211\u4eec\u53ef\u80fd\u4f1a\u7528\u5230 MessageBox \u6765\u5f39\u51fa\u4e00\u4e2a\u7a97\u53e3\u663e\u793a\u4e00\u4e9b\u6211\u4eec\u8981\u663e\u793a\u7684\u6570\u636e\u3002 \u8fd9\u4e2a\u5bf9\u8c61\u7684 Show() \u65b9\u6cd5\u6709\u591a\u4e2a\u91cd\u8f7d\uff0c\u8c03\u7528\u76f8\u5e94\u7684\u65b9\u6cd5\u53ef\u4ee5\u663e\u793a\u4e0d\u540c\u7684\u65b9\u5f0f\u3002 \u663e\u793a\u65f6\u95f4 \u8fd9\u4e2a\u4f8b\u5b50\u4e00\u5171\u4f7f\u7528\u4e86\u4e24\u4e2a\u63a7\u4ef6\uff0c\u4e00\u4e2a\u6309\u94ae\u548c\u4e00\u4e2a\u6587\u672c\u6846\u3002\u5b9e\u73b0\u7684\u529f\u80fd\u662f\u70b9\u51fb\u6309\u94ae\u7136\u540e\u8ba9\u6587\u672c\u6846\u4e2d\u663e\u793a\u5f53\u524d\u65f6\u95f4\u3002 private void OnShowTimeClicked(object sender, EventArgs e) { string time = DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\"); textBox_Time.Text = time; } \u63a7\u4ef6\u5e03\u5c40 \u53ef\u89c6\u5316\u5e03\u5c40 \u624b\u5de5\u5e03\u5c40 \u5e03\u5c40\u5668\u5e03\u5c40 anchor \u951a\u5b9a Anchor \u53ef\u4ee5\u8ba9\u63a7\u4ef6\u56fa\u5b9a\u663e\u793a\u7684\u4f4d\u7f6e\uff0c\u4f7f\u7528\u7684\u65b9\u6cd5\u662f\u5148\u628a\u63a7\u4ef6\u62c9\u5012\u60f3\u8981\u663e\u793a\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u8bbe\u7f6e\u76f8\u5e94\u7684 Anchor \u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728\u7a97\u53e3\u5927\u5c0f\u53d8\u5316\u65f6\u63a7\u4ef6\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002 \u51e0\u79cd\u5e38\u7528\u7684\u56fa\u5b9a\u4f4d\u7f6e \u56fa\u5b9a\u5230\u5de6\u4e0a\u3001\u53f3\u4e0a\u3001\u5de6\u4e0b\u3001\u53f3\u4e0b\u89d2\u3002 \u56fa\u5b9a\u5230\u4e0a\u4e2d\u3001\u5de6\u4e2d\u3001\u4e0b\u4e2d\u3001\u53f3\u4e2d\u3001\u4e2d\u5fc3 Dock \u505c\u9760 Dock \u53ef\u4ee5\u8ba9\u4e00\u4e2a\u63a7\u4ef6\u505c\u9760\u5728\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u3001\u4e2d\u4e94\u4e2a\u4f4d\u7f6e\u3002 \u4ee5\u5728\u7a97\u53e3\u4e2d\u653e\u7f6e\u4e09\u4e2a Panel \u4e3a\u4f8b\uff0c\u5b9e\u73b0\u4e0a\u5de6\u4e2d\u5e03\u5c40\uff0c\u53ea\u8981\u5206\u522b\u8bbe\u7f6e\u4e09\u4e2a Panel \u7684 Dock \u4e3a\u4e0a\u3001\u5de6\u3001\u4e2d\u5373\u53ef\u3002 \u5de6\u53f3\u5e03\u5c40 \u5de6\u53f3\u5e03\u5c40\u5b9e\u9645\u4e0a\u662f\u5148\u628a\u4e00\u4e2a Panel \u9760\u5de6\u505c\u9760\uff0c\u7136\u540e\u8ba9\u53e6\u4e00\u4e2a\u9760\u4e2d\u95f4\u505c\u9760\uff0c\u6700\u540e\u518d\u5728\u4e2d\u95f4\u7684 Panel \u4e2d\u653e\u7f6e\u4e00\u4e2a Panel \u5e76\u4e14\u505c\u9760\u5728\u9876\u90e8\u3002 \u5e03\u5c40\u5668 LayoutEngine \u5e03\u5c40\u5668 LayoutEngine \u8d1f\u8d23\u5b50\u63a7\u4ef6\u7684\u5e03\u5c40\u3002 \u81ea\u5b9a\u4e49\u5e03\u5c40\u5668","title":"WinForm"},{"location":"winform/#winform","text":"","title":"WinForm \u684c\u9762\u5f00\u53d1"},{"location":"winform/#messagebox","text":"\u5728\u6d4b\u8bd5\u65f6\u6211\u4eec\u53ef\u80fd\u4f1a\u7528\u5230 MessageBox \u6765\u5f39\u51fa\u4e00\u4e2a\u7a97\u53e3\u663e\u793a\u4e00\u4e9b\u6211\u4eec\u8981\u663e\u793a\u7684\u6570\u636e\u3002 \u8fd9\u4e2a\u5bf9\u8c61\u7684 Show() \u65b9\u6cd5\u6709\u591a\u4e2a\u91cd\u8f7d\uff0c\u8c03\u7528\u76f8\u5e94\u7684\u65b9\u6cd5\u53ef\u4ee5\u663e\u793a\u4e0d\u540c\u7684\u65b9\u5f0f\u3002","title":"MessageBox"},{"location":"winform/#_1","text":"\u8fd9\u4e2a\u4f8b\u5b50\u4e00\u5171\u4f7f\u7528\u4e86\u4e24\u4e2a\u63a7\u4ef6\uff0c\u4e00\u4e2a\u6309\u94ae\u548c\u4e00\u4e2a\u6587\u672c\u6846\u3002\u5b9e\u73b0\u7684\u529f\u80fd\u662f\u70b9\u51fb\u6309\u94ae\u7136\u540e\u8ba9\u6587\u672c\u6846\u4e2d\u663e\u793a\u5f53\u524d\u65f6\u95f4\u3002 private void OnShowTimeClicked(object sender, EventArgs e) { string time = DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\"); textBox_Time.Text = time; }","title":"\u663e\u793a\u65f6\u95f4"},{"location":"winform/#_2","text":"\u53ef\u89c6\u5316\u5e03\u5c40 \u624b\u5de5\u5e03\u5c40 \u5e03\u5c40\u5668\u5e03\u5c40","title":"\u63a7\u4ef6\u5e03\u5c40"},{"location":"winform/#anchor","text":"Anchor \u53ef\u4ee5\u8ba9\u63a7\u4ef6\u56fa\u5b9a\u663e\u793a\u7684\u4f4d\u7f6e\uff0c\u4f7f\u7528\u7684\u65b9\u6cd5\u662f\u5148\u628a\u63a7\u4ef6\u62c9\u5012\u60f3\u8981\u663e\u793a\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u8bbe\u7f6e\u76f8\u5e94\u7684 Anchor \u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728\u7a97\u53e3\u5927\u5c0f\u53d8\u5316\u65f6\u63a7\u4ef6\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002","title":"anchor \u951a\u5b9a"},{"location":"winform/#_3","text":"\u56fa\u5b9a\u5230\u5de6\u4e0a\u3001\u53f3\u4e0a\u3001\u5de6\u4e0b\u3001\u53f3\u4e0b\u89d2\u3002 \u56fa\u5b9a\u5230\u4e0a\u4e2d\u3001\u5de6\u4e2d\u3001\u4e0b\u4e2d\u3001\u53f3\u4e2d\u3001\u4e2d\u5fc3","title":"\u51e0\u79cd\u5e38\u7528\u7684\u56fa\u5b9a\u4f4d\u7f6e"},{"location":"winform/#dock","text":"Dock \u53ef\u4ee5\u8ba9\u4e00\u4e2a\u63a7\u4ef6\u505c\u9760\u5728\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u3001\u4e2d\u4e94\u4e2a\u4f4d\u7f6e\u3002 \u4ee5\u5728\u7a97\u53e3\u4e2d\u653e\u7f6e\u4e09\u4e2a Panel \u4e3a\u4f8b\uff0c\u5b9e\u73b0\u4e0a\u5de6\u4e2d\u5e03\u5c40\uff0c\u53ea\u8981\u5206\u522b\u8bbe\u7f6e\u4e09\u4e2a Panel \u7684 Dock \u4e3a\u4e0a\u3001\u5de6\u3001\u4e2d\u5373\u53ef\u3002","title":"Dock \u505c\u9760"},{"location":"winform/#_4","text":"\u5de6\u53f3\u5e03\u5c40\u5b9e\u9645\u4e0a\u662f\u5148\u628a\u4e00\u4e2a Panel \u9760\u5de6\u505c\u9760\uff0c\u7136\u540e\u8ba9\u53e6\u4e00\u4e2a\u9760\u4e2d\u95f4\u505c\u9760\uff0c\u6700\u540e\u518d\u5728\u4e2d\u95f4\u7684 Panel \u4e2d\u653e\u7f6e\u4e00\u4e2a Panel \u5e76\u4e14\u505c\u9760\u5728\u9876\u90e8\u3002","title":"\u5de6\u53f3\u5e03\u5c40"},{"location":"winform/#layoutengine","text":"\u5e03\u5c40\u5668 LayoutEngine \u8d1f\u8d23\u5b50\u63a7\u4ef6\u7684\u5e03\u5c40\u3002","title":"\u5e03\u5c40\u5668 LayoutEngine"},{"location":"winform/#_5","text":"","title":"\u81ea\u5b9a\u4e49\u5e03\u5c40\u5668"}]}